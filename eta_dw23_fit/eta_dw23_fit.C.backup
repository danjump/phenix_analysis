#include <TROOT.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TPad.h>
#include <TFile.h>
#include <TGraphErrors.h>
#include <TTree.h>
#include <TBranch.h>
#include <TF1.h>
#include <TF2.h>
#include <time.h>
#include <TLeaf.h>
#include <math.h>
#include <iostream>
#include <fstream>
#include <time.h>
#include <unistd.h>
#include <sstream>
#include <string>
#include <vector>
#include <RooArgSet.h>
#include <RooDataSet.h>
#include <RooRealVar.h>
#include <RooDataHist.h>
#include <RooHistPdf.h>
#include <RooAddPdf.h>
#include "eta_dw23_fit.h"
#include "/direct/phenix+u/workarea/danielj/cvs_code/offline/analysis/danielj/run13_analysis/get_phys_dists/phys_hist_definitions.h"
#include "define_eta_dw23_hist.h"

// x[0] <- dw23
// this assumes a normalized, coaxial, double gaussian distribution of dw23
double double_gaus_1d(double * x, double * par) {
  double offset = par[0];
  double sigma1 = par[1]; //should be wider
  double sigma2 = par[2]; //should be narrower
  double factor = par[3];
  double pi; pi = 3.14159265358979323846;
  double val = 1/( sigma1*sqrt(2*pi)+ factor*sigma2*sqrt(2*pi) ) * ( exp(-0.5*pow((x[0]-offset)/sigma1,2)) + factor*exp(-0.5*pow((x[0]-offset)/sigma2,2)) );
  return val;
}

// x[0] <- dw23
// this assumes a normalized, coaxial, double gaussian distribution of dw23
double double_gaus_slice(double * x, double * par) {
  double offset = par[0];
  double sigma1 = par[1]; //should be wider
  double sigma2 = par[2]; //should be narrower
  double factor = par[3];
  double poly_scale = par[4];
  double pi; pi = 3.14159265358979323846;
  double val = poly_scale*1/( sigma1*sqrt(2*pi)+ factor*sigma2*sqrt(2*pi) ) * ( exp(-0.5*pow((x[0]-offset)/sigma1,2)) + factor*exp(-0.5*pow((x[0]-offset)/sigma2,2)) );
  return val;
}

// x[0] <- Wness
// x[1] <- dw23
// this assumes a normalized, coaxial, double gaussian distribution of dw23, whos parameters varry linearly with Wness
double double_gaus_2d(double * x, double * par) {
  double gaus_offset = par[0] + par[1]*x[0];
  double gaus_sigma1 = par[2] + par[3]*x[0]; //should be wider
  double gaus_sigma2 = par[4] + par[5]*x[0]; //should be narrower
  double gaus_factor = par[6] + par[7]*x[0];
  double pi; pi = 3.14159265358979323846;

  // polynomial describes the normalized 1D wness distribution. 
  // used as a weight factor for the otherwise normalized dw23 distribution and different regions of wness
  double polynomial_factor = par[8] + par[9]*x[0] + par[10]*pow(x[0],2) + par[11]*pow(x[0],3) + par[12]*pow(x[0],4);
  
  double val = polynomial_factor*( 1/(gaus_sigma1*sqrt(2*pi)+ gaus_factor*gaus_sigma2*sqrt(2*pi)) ) * 
    ( exp(-0.5*pow((x[1]-gaus_offset)/gaus_sigma1,2)) + gaus_factor*exp(-0.5*pow((x[1]-gaus_offset)/gaus_sigma2,2)) );
  
  return val;
}

void eta_dw23_fit(const std::string sig_w_infilename, const std::string bkg_w_infilename, const std::string data_infilename) { 

  bool save_fit_hists=false;
  bool read_fit_hists=false;

  char name[300]; sprintf(name,"prevent unused variable error");
 
  Float_t 
     Wness,
  charge,      eta,          pz,
           DG0,
  DDG0,        DG4,         chi2,
         DCA_r,       
  dw23,        Rpc1dca,     Rpc3dca,
  fvtx_dphi,   fvtx_dr,     fvtx_dtheta, fvtx_dr_dtheta;
  /*Float_t 
  Run_Number,  Evt_Number,  triggerbit,
  Evt_bbcZ,    SpinX_ID,    Wness,
  charge,      pT,          pz,
  phi,         eta,         DG0,
  DDG0,        DG4,         chi2,
  DCA_z,       DCA_r,       dphi23,
  dw23,        Rpc1dca,     Rpc3dca,
  fvtx_dphi,   fvtx_dr,     fvtx_dtheta, fvtx_dr_dtheta;*/
  
  TFile *infile[3];

  infile[0]= new TFile(sig_w_infilename.c_str());
  infile[1]= new TFile(bkg_w_infilename.c_str());
  infile[2]= new TFile(data_infilename.c_str());
  
  define_dw23_vs_eta_hists();
  
  TH2F * dw23_vs_eta = new TH2F("dw23_vs_eta","dw23_vs_eta",100,distmin[3],distmax[3],100,distmin[11],distmax[11]);
  
  int in_count[3][2][2],over_count[3][2][2],under_count[3][2][2];
  //loop over the different input files and all events within each file to get distributions
  for(int file_index=0; file_index<1; file_index++) {//read loop over files
    for(int arm=0; arm<2; arm++) {
      for(int charge=0; charge<2; charge++) {
        in_count[file_index][arm][charge] = 0;
        over_count[file_index][arm][charge] = 0;
        under_count[file_index][arm][charge] = 0;
      }
    }
    
    define_wness_ntuple(infile[file_index]);

//    wness_ntuple->SetBranchAddress("Run_Number",&Run_Number);
//    wness_ntuple->SetBranchAddress("Evt_Number",&Evt_Number);
//    wness_ntuple->SetBranchAddress("triggerbit",&triggerbit);
//    wness_ntuple->SetBranchAddress("Evt_bbcZ",&Evt_bbcZ);
//    wness_ntuple->SetBranchAddress("SpinX_ID",&SpinX_ID);
    wness_ntuple->SetBranchAddress("Wness",&Wness);
    wness_ntuple->SetBranchAddress("charge",&charge);
//    wness_ntuple->SetBranchAddress("pT",&pT);
    wness_ntuple->SetBranchAddress("pz",&pz);
//    wness_ntuple->SetBranchAddress("phi",&phi);
    wness_ntuple->SetBranchAddress("eta",&eta);
    wness_ntuple->SetBranchAddress("DG0",&DG0);
    wness_ntuple->SetBranchAddress("DDG0",&DDG0);
    wness_ntuple->SetBranchAddress("DG4",&DG4);
    wness_ntuple->SetBranchAddress("chi2",&chi2);
//    wness_ntuple->SetBranchAddress("DCA_z",&DCA_z);
    wness_ntuple->SetBranchAddress("DCA_r",&DCA_r);
//    wness_ntuple->SetBranchAddress("dphi23",&dphi23);
    wness_ntuple->SetBranchAddress("dw23",&dw23);
    wness_ntuple->SetBranchAddress("Rpc1dca",&Rpc1dca);
    wness_ntuple->SetBranchAddress("Rpc3dca",&Rpc3dca);
    wness_ntuple->SetBranchAddress("fvtx_dphi",&fvtx_dphi);
    wness_ntuple->SetBranchAddress("fvtx_dr",&fvtx_dr);
    wness_ntuple->SetBranchAddress("fvtx_dtheta",&fvtx_dtheta);
    wness_ntuple->SetBranchAddress("fvtx_dr_dtheta",&fvtx_dr_dtheta);


    int entries = wness_ntuple->GetEntries();

    int percent_done=0;
    int percent_incriment=20;
    int percent_done_previous;

    time_t rawtime;

    cout << "\nNumber of events:  " << entries << endl;
    cout << "Starting Main Event Loop...\n\n";
    time(&rawtime);
    printf("Start time:  %s",ctime(&rawtime));

    //Get events from file, fill necessary histograms
    for(int i=0; i<entries; i++) {//Events loop
      //loop progress command line output
      percent_done_previous=percent_done;
      percent_done=(int)floor((float)(i+1)/(float)entries*(float)100);
      if(percent_done%percent_incriment==0 && percent_done != percent_done_previous) {
        printf("%3i%% done",percent_done);
        if(percent_done==100) {
          cout << "^_^";
          time( &rawtime );
          printf(" %s",ctime(&rawtime));
        } else {
          cout << "...";
          time( &rawtime );
          printf(" %s",ctime(&rawtime));
        }
      }

      wness_ntuple->GetEntry(i);

      // Set arm (0 = South, 1 = North)
      int arm = 0;
      if		(pz < 0) arm = 0;
      else if (pz > 0) arm = 1;


      int charge_index = 0;
      if		(charge < 0) charge_index = 0;
      else if (charge > 0) charge_index = 1;

      int rpcdca_condition = -1;
      if((Rpc1dca < 100) && (Rpc3dca < 100)) {
        rpcdca_condition = 2;
      } else if(Rpc1dca < 100) {
        rpcdca_condition = 0;
      } else if(Rpc3dca < 100) {
        rpcdca_condition = 1;
      }

      int goodfvtx = 0;
      if(-1.5 < fvtx_dphi && fvtx_dphi < 1.5 &&
          0 < fvtx_dtheta && fvtx_dtheta < 1.5  &&
          0 < fvtx_dr && fvtx_dr < 100) {
        bool fvtx_outofbounds = false;
        if(-1.5 > fvtx_dphi || fvtx_dphi > distmax[14]) {
          printf("fvtx_dphi: %f  ",fvtx_dphi);
          fvtx_outofbounds = true;
        }
        if(distmin[15] > fvtx_dr || fvtx_dr > distmax[15]) {
          printf("fvtx_dr: %f  ",fvtx_dr);
          fvtx_outofbounds = true;
        }
        if(distmin[16] > fvtx_dtheta || fvtx_dtheta > distmax[16]) {
          printf("fvtx_dtheta: %f  ",fvtx_dtheta);
          fvtx_outofbounds = true;
        }
        //if(distmin[17] > fvtx_dr_dtheta || fvtx_dr_dtheta > distmax[17]) {
          //printf("fvtx_dr_dtheta: %f",fvtx_dr_dtheta);
          //fvtx_outofbounds = true;
       // }

        if(fvtx_outofbounds) {
          printf("\n");
          continue;
        }

        goodfvtx = 1;

      } else {
        goodfvtx = 0;
      }

      int wness_section;
      if(Wness==1.0) wness_section = 9;
      else wness_section = floor(Wness*10);

      if(wness_section==9) dw23_vs_eta->Fill(eta,dw23);
      h_dw23[file_index][arm][charge_index][wness_section]->Fill(dw23);
      h_wness_sections[file_index][arm][charge_index][wness_section]->Fill(Wness);
      h_wness[file_index][arm][charge_index]->Fill(Wness);
      h_eta[file_index][arm][charge_index][wness_section]->Fill(eta);
      h2_dw23_vs_eta[file_index][arm][charge_index][wness_section]->Fill(eta,dw23);
      h2_dw23_vs_wness[file_index][arm][charge_index]->Fill(Wness,dw23);
      
      if(Wness>0 && Wness<1)
        in_count[file_index][arm][charge_index]++;
      else if(Wness>=1) {
        over_count[file_index][arm][charge_index]++;
      } else if(Wness <= 0) {
        under_count[file_index][arm][charge_index]++;
      }
    } //end main event loop
  }//end read loop over files
  
  TFile * hist_infile;
  if(read_fit_hists) {
    hist_infile = new TFile("/direct/phenix+spin2/beaumim/WAnalysisRun13/AnalysisCode/macros/rootTrees/Run13_Data_Plots.root");
    for(int arm=0; arm<2; arm++) {
      for(int charge=0; charge<2; charge++) {
        sprintf(name,"dw23VsWness_Arm%d_Charge%d_data",arm,charge);
        h2_dw23_vs_wness[0][arm][charge] = (TH2F*)hist_infile->Get(name);
        sprintf(name,"Wness_Fit_Seed_Arm%d_Charge%d_data",arm,charge);
        h_wness[0][arm][charge] = (TH1F*)hist_infile->Get(name);
      }
    }
  }
  //DW23 EXTRAPOLATION FITTING

  //2d dw23 vs wness fitting
  double count_region_2d[2][2][6];
  double count_region_1d[2][2][6];
  int lower_w_bin, upper_w_bin;
  
  for(int source=0; source < 1; source++) {
    for(int arm=0; arm<2; arm++) {
      for(int charge=0; charge<2; charge++) {
        for(int i=0; i<4; i++) {
          lower_w_bin = (2*i+1)*nhistbins/10+1;
          upper_w_bin = lower_w_bin+2*nhistbins/10-1;
          count_region_2d[arm][charge][i+1] = h2_dw23_vs_wness[source][arm][charge]->Integral(lower_w_bin,upper_w_bin,1,nhistbins); 
          count_region_1d[arm][charge][i+1] = h_wness[source][arm][charge]->Integral(lower_w_bin,upper_w_bin); 
        }
        
        lower_w_bin = (2*4+1)*nhistbins/10+1;
        upper_w_bin = lower_w_bin+1*nhistbins/10-1;
        count_region_2d[arm][charge][5] = h2_dw23_vs_wness[source][arm][charge]->Integral(lower_w_bin,upper_w_bin,1,nhistbins); 
        count_region_1d[arm][charge][5] = h_wness[source][arm][charge]->Integral(lower_w_bin,upper_w_bin); 

        lower_w_bin = 1;
        upper_w_bin = lower_w_bin+1*nhistbins/10-1;
        count_region_2d[arm][charge][0] = h2_dw23_vs_wness[source][arm][charge]->Integral(lower_w_bin,upper_w_bin,1,nhistbins);
        count_region_1d[arm][charge][0] = h_wness[source][arm][charge]->Integral(lower_w_bin,upper_w_bin); 
        
        double sum = count_region_2d[arm][charge][0]+count_region_2d[arm][charge][1]+count_region_2d[arm][charge][2]+
                     count_region_2d[arm][charge][3]+count_region_2d[arm][charge][4]+count_region_2d[arm][charge][5];
        printf("2D STATS: total:%6.0f .0-.1:%6.0f .1-.3:%4.0f .3-.5:%4.0f .5-.7:%4.0f .7-.9:%4.0f .9-1:%4.0f\n",
            sum,count_region_2d[arm][charge][0],count_region_2d[arm][charge][1],count_region_2d[arm][charge][2],
            count_region_2d[arm][charge][3],count_region_2d[arm][charge][4],count_region_2d[arm][charge][5]);
        
        sum = count_region_1d[arm][charge][0]+count_region_1d[arm][charge][1]+count_region_1d[arm][charge][2]+
                     count_region_1d[arm][charge][3]+count_region_1d[arm][charge][4]+count_region_1d[arm][charge][5];
        printf("1D STATS: total:%6.0f .0-.1:%6.0f .1-.3:%4.0f .3-.5:%4.0f .5-.7:%4.0f .7-.9:%4.0f .9-1:%4.0f\n",
            sum,count_region_1d[arm][charge][0],count_region_1d[arm][charge][1],count_region_1d[arm][charge][2],
            count_region_1d[arm][charge][3],count_region_1d[arm][charge][4],count_region_1d[arm][charge][5]);
        printf("under:%d in:%d over:%d\n",under_count[source][arm][charge]++,in_count[source][arm][charge]++,over_count[source][arm][charge]++);
      }
    }
  }
 
  int n_pars_2d = 13;
  
  double fit_chi2ndf[3][2][2];
  double mean_linear_pars[3][2][2][2];
  double sigma1_linear_pars[3][2][2][2];
  double sigma2_linear_pars[3][2][2][2];
  double factor_linear_pars[3][2][2][2];
  double poly_pars[3][2][2][5];

  double mean_linear_pars_err[3][2][2][2];
  double sigma1_linear_pars_err[3][2][2][2];
  double sigma2_linear_pars_err[3][2][2][2];
  double factor_linear_pars_err[3][2][2][2];
  double poly_pars_err[3][2][2][5];
  
  double dw23_vs_wness_integral[3][2][2];

  TCanvas * c_wness_fits = new TCanvas("c_wness_fits","c_wness_fits",1000,1000);
  c_wness_fits->Divide(2,2);
  TF1 *wness_pol[3][2][2];
  

  TFile * f_fit_hists;
  if(save_fit_hists) {
    f_fit_hists = new TFile("fit_hists.root","RECREATE");
  }

  for(int source=0; source < 1; source++) {//start loop for 2d dw 23 extrapolation fit
    for(int arm=0; arm<2; arm++) {
      for(int charge=0; charge<2; charge++) {
        h2_dw23_vs_wness[source][arm][charge]->Sumw2();
        dw23_vs_wness_integral[source][arm][charge] = h2_dw23_vs_wness[source][arm][charge]->Integral("width");
        if(dw23_vs_wness_integral[source][arm][charge]!=0)
          h2_dw23_vs_wness[source][arm][charge]->Scale(1.0/dw23_vs_wness_integral[source][arm][charge]);
        
        if(save_fit_hists) {
          f_fit_hists->cd();
          h2_dw23_vs_wness[source][arm][charge]->Write();
        }
        TF2 * f2_double_gaus_2d = new TF2("f2_double_gaus_2d",double_gaus_2d,0.1,0.9,-.3,.3,n_pars_2d);
        
        //linear gaussian parameter seeds (from hide thesis mostly)
        /*f2_double_gaus_2d->SetParameter(0,0.01);        // mean(offset) constant
        f2_double_gaus_2d->SetParameter(1,0.01); // mean(offset) slope
        
        f2_double_gaus_2d->SetParameter(2,0.1);               // sigma1 constant
        f2_double_gaus_2d->SetParameter(3,-0.1);             // sigma1 slope
        
        f2_double_gaus_2d->SetParameter(4,0.02);              // sigma2 constant
        f2_double_gaus_2d->SetParameter(5,-0.1);             // sigma2 slope
        
        f2_double_gaus_2d->SetParameter(6,1);                 // constant(factor) constant
        f2_double_gaus_2d->SetParameter(7,-1);                 // constant(factor) slope*/

        double dw23_average = (h_dw23[source][arm][charge][1]->GetMean()+
            h_dw23[source][arm][charge][2]->GetMean()+
            h_dw23[source][arm][charge][3]->GetMean())/3.0;

        f2_double_gaus_2d->SetParameter(0,dw23_average);        // mean(offset) constant
        f2_double_gaus_2d->SetParameter(1,(charge?-1:1)*0.005); // mean(offset) slope
        
        f2_double_gaus_2d->SetParameter(2,0.1);               // sigma1 constant
        f2_double_gaus_2d->SetParameter(3,-0.06);             // sigma1 slope
        
        f2_double_gaus_2d->SetParameter(4,0.04);              // sigma2 constant
        f2_double_gaus_2d->SetParameter(5,-0.01);             // sigma2 slope
        
        f2_double_gaus_2d->SetParameter(6,1);                 // constant(factor) constant
        f2_double_gaus_2d->SetParameter(7,1);                 // constant(factor) slope

        
        //parameter limits also estimated from hides thesis for an initial fit
        /*f2_double_gaus_2d->SetParLimits(0,dw23_average*0.5,dw23_average*2);        // mean(offset) constant
        f2_double_gaus_2d->SetParLimits(1,(charge?-1:0)*0.01,(charge?0:1)*0.01);   // mean(offset) slope

        f2_double_gaus_2d->SetParLimits(2,0.05,0.8);               // sigma1 constant
        f2_double_gaus_2d->SetParLimits(3,-0.5,0);                 // sigma1 slope
        
        f2_double_gaus_2d->SetParLimits(4,0.008,0.15);             // sigma2 constant
        f2_double_gaus_2d->SetParLimits(5,-0.001,0);               // sigma2 slope
        
        f2_double_gaus_2d->SetParLimits(6,-30,30);                 // constant(factor) constant
        f2_double_gaus_2d->SetParLimits(7,-30,30);*/                 // constant(factor) slope
        
        //fit wness distribution with polynomial to get parameter seeds
        c_wness_fits->cd(arm+2*charge+1);
        gPad->SetLogy();
        h_wness[source][arm][charge]->Sumw2();
        double integral = h_wness[source][arm][charge]->Integral("width");
        if(integral != 0)
          h_wness[source][arm][charge]->Scale(1/integral);
        h_wness[source][arm][charge]->Draw("eP");
        if(save_fit_hists) {
          h_wness[source][arm][charge]->Write();
        }
        sprintf(name,"wness_pol_source%d_charge%d_arm%d",source,arm,charge);
        wness_pol[source][arm][charge] = new TF1(name,"pol4(0)",0.1,0.9);
        h_wness[source][arm][charge]->Fit(name,"QMR");
        TF1 *wness_pol_tmp = new TF1("wness_pol_tmp","pol4(0)",0,1);
        for(int i=0; i<5; i++)
          wness_pol_tmp->SetParameter(i,wness_pol[source][arm][charge]->GetParameter(i));
        wness_pol_tmp->SetLineColor(1);
        wness_pol_tmp->SetLineStyle(2);
        wness_pol_tmp->DrawCopy("same");
        if(arm==1 && charge==1)
          c_wness_fits->SaveAs("/direct/phenix+WWW/p/draft/danielj/analysis_plots/run13_w_analysis/eta_dw23_fit/temp/wness_fits.png");
        
        f2_double_gaus_2d->FixParameter(8,wness_pol[source][arm][charge]->GetParameter(0));
        f2_double_gaus_2d->FixParameter(9,wness_pol[source][arm][charge]->GetParameter(1));
        f2_double_gaus_2d->FixParameter(10,wness_pol[source][arm][charge]->GetParameter(2));
        f2_double_gaus_2d->FixParameter(11,wness_pol[source][arm][charge]->GetParameter(3));
        f2_double_gaus_2d->FixParameter(12,wness_pol[source][arm][charge]->GetParameter(4));
        
        f2_double_gaus_2d->SetParLimits(2,.09,1);
        f2_double_gaus_2d->SetParLimits(4,0,.09);
        
        h2_dw23_vs_wness[source][arm][charge]->Fit("f2_double_gaus_2d","QMRN");

        fit_chi2ndf[source][arm][charge] = f2_double_gaus_2d->GetChisquare() / f2_double_gaus_2d->GetNDF();
        
        mean_linear_pars[source][arm][charge][0] = f2_double_gaus_2d->GetParameter(0);
        mean_linear_pars[source][arm][charge][1] = f2_double_gaus_2d->GetParameter(1);
        sigma1_linear_pars[source][arm][charge][0] = f2_double_gaus_2d->GetParameter(2);
        sigma1_linear_pars[source][arm][charge][1] = f2_double_gaus_2d->GetParameter(3);
        sigma2_linear_pars[source][arm][charge][0] = f2_double_gaus_2d->GetParameter(4);
        sigma2_linear_pars[source][arm][charge][1] = f2_double_gaus_2d->GetParameter(5);
        factor_linear_pars[source][arm][charge][0] = f2_double_gaus_2d->GetParameter(6);
        factor_linear_pars[source][arm][charge][1] = f2_double_gaus_2d->GetParameter(7);
        poly_pars[source][arm][charge][0] = f2_double_gaus_2d->GetParameter(8);
        poly_pars[source][arm][charge][1] = f2_double_gaus_2d->GetParameter(9);
        poly_pars[source][arm][charge][2] = f2_double_gaus_2d->GetParameter(10);
        poly_pars[source][arm][charge][3] = f2_double_gaus_2d->GetParameter(11);
        poly_pars[source][arm][charge][4] = f2_double_gaus_2d->GetParameter(12);
        
        mean_linear_pars_err[source][arm][charge][0] = f2_double_gaus_2d->GetParError(0);
        mean_linear_pars_err[source][arm][charge][1] = f2_double_gaus_2d->GetParError(1);
        sigma1_linear_pars_err[source][arm][charge][0] = f2_double_gaus_2d->GetParError(2);
        sigma1_linear_pars_err[source][arm][charge][1] = f2_double_gaus_2d->GetParError(3);
        sigma2_linear_pars_err[source][arm][charge][0] = f2_double_gaus_2d->GetParError(4);
        sigma2_linear_pars_err[source][arm][charge][1] = f2_double_gaus_2d->GetParError(5);
        factor_linear_pars_err[source][arm][charge][0] = f2_double_gaus_2d->GetParError(6);
        factor_linear_pars_err[source][arm][charge][1] = f2_double_gaus_2d->GetParError(7);
        poly_pars_err[source][arm][charge][0] = f2_double_gaus_2d->GetParError(8);
        poly_pars_err[source][arm][charge][1] = f2_double_gaus_2d->GetParError(9);
        poly_pars_err[source][arm][charge][2] = f2_double_gaus_2d->GetParError(10);
        poly_pars_err[source][arm][charge][3] = f2_double_gaus_2d->GetParError(11);
        poly_pars_err[source][arm][charge][4] = f2_double_gaus_2d->GetParError(12);
        
      }
    }
  }

  printf("test2\n");

  //combine and scale dw23 histograms for display
  TH1F *h_dw23_sums[3][2][2][6];
  TH1F *h_wness_sums[3][2][2][5];
  double integral_1d, integral_region_2d[2][2][6];
  
  for(int source=0; source < 1; source++) {
    for(int arm=0; arm<2; arm++) {
      for(int charge=0; charge<2; charge++) {
        for(int i=0; i<4; i++) {
          if(read_fit_hists) {
            sprintf(name,"dw23Wness_WnessBin_%d_Arm%d_Charge%d_data",i+1,arm,charge);
            h_dw23_sums[0][arm][charge][i] = (TH1F*)hist_infile->Get(name);
          } else {

            sprintf(name,"h_dw23_sums_source%d_arm%d_charge%d_range%d",source,arm,charge,i);
            h_dw23_sums[source][arm][charge][i] = new TH1F(name,name,nhistbins,distmin[11],distmax[11]);

            h_dw23_sums[source][arm][charge][i]->Add(h_dw23[source][arm][charge][(2*i)+1],h_dw23[source][arm][charge][(2*i)+2]);
          }
          sprintf(name,"h_wness_sums_source%d_arm%d_charge%d_range%d",source,arm,charge,i);
          h_wness_sums[source][arm][charge][i] = new TH1F(name,name,nhistbins,0,1);
          
          h_wness_sums[source][arm][charge][i]->Add(h_wness_sections[source][arm][charge][(2*i)+1],h_wness_sections[source][arm][charge][(2*i)+2]);
          
          //scale the histogram to match the function slice that will be drawn
          integral_1d = h_dw23_sums[source][arm][charge][i]->Integral("width");
          lower_w_bin = (2*i+1)*nhistbins/10+1;
          upper_w_bin = lower_w_bin+2*nhistbins/10-1;
          integral_region_2d[arm][charge][i+1] = h2_dw23_vs_wness[source][arm][charge]->Integral(lower_w_bin,upper_w_bin,1,nhistbins,"width"); 
          h_dw23_sums[source][arm][charge][i]->Sumw2();
          if(integral_1d != 0) {
            //set the integral of the 1d curve equal to the integral of the 2d section/wness width
            h_dw23_sums[source][arm][charge][i]->Scale((integral_region_2d[arm][charge][i+1]/0.2)/integral_1d); 
          }
          if(save_fit_hists) {
            h_dw23_sums[source][arm][charge][i]->Write();
          }
        }
        if(read_fit_hists) {
          sprintf(name,"dw23Wness_WnessBin_%d_Arm%d_Charge%d_data",4+1,arm,charge);
          h_dw23_sums[0][arm][charge][4] = (TH1F*)hist_infile->Get(name);
        } else {
          sprintf(name,"h_dw23_sums_source%d_arm%d_charge%d_range%d",source,arm,charge,4);
          h_dw23_sums[source][arm][charge][4] = (TH1F*)h_dw23[source][arm][charge][9]->Clone(name);
        }
        
        sprintf(name,"h_wness_sums_source%d_arm%d_charge%d_range%d",source,arm,charge,4);
        h_wness_sums[source][arm][charge][4] = (TH1F*)h_wness_sections[source][arm][charge][9]->Clone(name);

        //scale the histogram to match the function slice that will be drawn
        integral_1d = h_dw23_sums[source][arm][charge][4]->Integral("width");
        lower_w_bin = (2*4+1)*nhistbins/10+1;
        upper_w_bin = lower_w_bin+1*nhistbins/10-1;
        integral_region_2d[arm][charge][5] = h2_dw23_vs_wness[source][arm][charge]->Integral(lower_w_bin,upper_w_bin,1,nhistbins,"width"); 
        h_dw23_sums[source][arm][charge][4]->Sumw2();
        if(integral_1d != 0) {
          //set the integral of the 1d curve equal to the integral of the 2d section/wness width
          h_dw23_sums[source][arm][charge][4]->Scale((integral_region_2d[arm][charge][5]/0.1)/integral_1d); 
        }

        if(save_fit_hists) {
          h_dw23_sums[source][arm][charge][4]->Write();
        }
      }
    }
  }


  TCanvas * c_h2_dw23_vs_wness[3][2][2];
  TCanvas * c_dw23_fits_summary;
  c_dw23_fits_summary = new TCanvas("c_dw23_fits_summary","c_dw23_fits_summary",1600,1600);
  c_dw23_fits_summary->Divide(4,5);
  
  char * arm_label[2] = {(char*)"South",(char*)"North"};
  char * charge_label[2] = {(char*)"#mu^{-}",(char*)"#mu^{+}"};
  for(int source=0; source < 1; source++) {//display loop for 2d fitting
    for(int arm=0; arm<2; arm++) {
      for(int charge=0; charge<2; charge++) {
        sprintf(name,"c_h2_dw23_vs_wness_source%d_arm%d_charge%d",source,arm,charge);
        c_h2_dw23_vs_wness[source][arm][charge] = new TCanvas(name,name,1800,1000);
        c_h2_dw23_vs_wness[source][arm][charge]->Divide(3,3);
        
        /*printf("\n\n--- Arm%d Charge%d ---\n",arm,charge);
        double sum = count_region_2d[arm][charge][0]+count_region_2d[arm][charge][1]+
                           count_region_2d[arm][charge][2]+count_region_2d[arm][charge][3]+count_region_2d[arm][charge][4]+count_region_2d[arm][charge][5];
        printf("Statistics: total:%.0f .0-.1:%.0f .1-.3:%.0f .3-.5:%.0f .5-.7:%.0f .7-.9:%.0f .9-1:%.0f\n",sum,count_region_2d[arm][charge][0],count_region_2d[arm][charge][1],
            count_region_2d[arm][charge][2],count_region_2d[arm][charge][3],count_region_2d[arm][charge][4],count_region_2d[arm][charge][5]);
        printf("offset: const=%9f+-%9f  slope=%9f+-%9f\n",
            mean_linear_pars[source][arm][charge][0],mean_linear_pars_err[source][arm][charge][0],
            mean_linear_pars[source][arm][charge][1],mean_linear_pars_err[source][arm][charge][1]);
        printf("Sigma1: const=%9f+-%9f  slope=%9f+-%9f\n",
            sigma1_linear_pars[source][arm][charge][0],sigma1_linear_pars_err[source][arm][charge][0],
            sigma1_linear_pars[source][arm][charge][1],sigma1_linear_pars_err[source][arm][charge][1]);
        printf("Sigma2: const=%9f+-%9f  slope=%9f+-%9f\n",
            sigma2_linear_pars[source][arm][charge][0],sigma2_linear_pars_err[source][arm][charge][0],
            sigma2_linear_pars[source][arm][charge][1],sigma2_linear_pars_err[source][arm][charge][1]);
        printf("Factor: const=%9f+-%9f  slope=%9f+-%9f\n",
            factor_linear_pars[source][arm][charge][0],factor_linear_pars_err[source][arm][charge][0],
            factor_linear_pars[source][arm][charge][1],factor_linear_pars_err[source][arm][charge][1]);*/
        
        printf("\n--- Arm%d Charge%d ---\n",arm,charge);
        printf("Fit Chi2/ndf:   %9f\n",fit_chi2ndf[source][arm][charge]);
        printf("offset const:   %9f   +-  (%9f)\n",
            mean_linear_pars[source][arm][charge][0],mean_linear_pars_err[source][arm][charge][0]);
        printf("offset slope:   %9f   +-  (%9f)\n",
            mean_linear_pars[source][arm][charge][1],mean_linear_pars_err[source][arm][charge][1]);
        printf("Sigma1 const:   %9f   +-  (%9f)\n",
            sigma1_linear_pars[source][arm][charge][0],sigma1_linear_pars_err[source][arm][charge][0]);
        printf("Sigma1 slope:   %9f   +-  (%9f)\n",
            sigma1_linear_pars[source][arm][charge][1],sigma1_linear_pars_err[source][arm][charge][1]);
        printf("Sigma2 const:   %9f   +-  (%9f)\n",
            sigma2_linear_pars[source][arm][charge][0],sigma2_linear_pars_err[source][arm][charge][0]);
        printf("Sigma2 slope:   %9f   +-  (%9f)\n",
            sigma2_linear_pars[source][arm][charge][1],sigma2_linear_pars_err[source][arm][charge][1]);
        printf("Factor const:   %9f   +-  (%9f)\n",
            factor_linear_pars[source][arm][charge][0],factor_linear_pars_err[source][arm][charge][0]);
        printf("Factor slope:   %9f   +-  (%9f)\n",
            factor_linear_pars[source][arm][charge][1],factor_linear_pars_err[source][arm][charge][1]);
        printf("Poly Par[0]:    %9f   +-  (%9f)\n",
            poly_pars[source][arm][charge][0],poly_pars_err[source][arm][charge][0]);
        printf("Poly Par[0]:    %9f   +-  (%9f)\n",
            poly_pars[source][arm][charge][1],poly_pars_err[source][arm][charge][1]);
        printf("Poly Par[0]:    %9f   +-  (%9f)\n",
            poly_pars[source][arm][charge][2],poly_pars_err[source][arm][charge][2]);
        printf("Poly Par[0]:    %9f   +-  (%9f)\n",
            poly_pars[source][arm][charge][3],poly_pars_err[source][arm][charge][3]);
        printf("Poly Par[0]:    %9f   +-  (%9f)\n",
            poly_pars[source][arm][charge][4],poly_pars_err[source][arm][charge][4]);
        
        TF1 *f_2d_gaus_slice[5];
        double axis_max = 0;

        for(int region=0; region<4; region++) {
          sprintf(name,"f_2d_gaus_slice_%d",region);
          double wness_temp = h_wness_sums[source][arm][charge][region]->GetMean();
          f_2d_gaus_slice[region] = new TF1(name,double_gaus_slice,distmin[11],distmax[11],5);
          f_2d_gaus_slice[region]->SetParameter(0,mean_linear_pars[source][arm][charge][0]+
              mean_linear_pars[source][arm][charge][1]*wness_temp);
          f_2d_gaus_slice[region]->SetParameter(1,sigma1_linear_pars[source][arm][charge][0]+
              sigma1_linear_pars[source][arm][charge][1]*wness_temp);
          f_2d_gaus_slice[region]->SetParameter(2,sigma2_linear_pars[source][arm][charge][0]+
              sigma2_linear_pars[source][arm][charge][1]*wness_temp);
          f_2d_gaus_slice[region]->SetParameter(3,factor_linear_pars[source][arm][charge][0]+
              factor_linear_pars[source][arm][charge][1]*wness_temp);
          f_2d_gaus_slice[region]->SetParameter(4,
              poly_pars[source][arm][charge][0]+
              poly_pars[source][arm][charge][1]*(wness_temp)+
              poly_pars[source][arm][charge][2]*pow(wness_temp,2)+
              poly_pars[source][arm][charge][3]*pow(wness_temp,3)+
              poly_pars[source][arm][charge][4]*pow(wness_temp,4));
          
          c_h2_dw23_vs_wness[source][arm][charge]->cd(region+1);
          if(region==0) 
            axis_max = h_dw23_sums[source][arm][charge][region]->GetMaximum()*1.15;
          h_dw23_sums[source][arm][charge][region]->GetYaxis()->SetRangeUser(0,axis_max);
          sprintf(name,"%s %s dw_{23} (%3.1f < W_{ness} < %3.1f)",arm_label[arm],charge_label[charge],((region*2)+1)/10.0,((region*2)+3)/10.0);
          h_dw23_sums[source][arm][charge][region]->SetTitle(name);
          h_dw23_sums[source][arm][charge][region]->SetTitleSize(.09);
          h_dw23_sums[source][arm][charge][region]->GetXaxis()->SetLabelSize(.06);
          h_dw23_sums[source][arm][charge][region]->GetXaxis()->SetTitle("dw_{23}");
          h_dw23_sums[source][arm][charge][region]->GetXaxis()->SetTitleSize(.06);
          h_dw23_sums[source][arm][charge][region]->GetYaxis()->SetLabelSize(.06);
          h_dw23_sums[source][arm][charge][region]->GetYaxis()->SetTitle("Yield (2D Normalized)");
          h_dw23_sums[source][arm][charge][region]->GetYaxis()->SetTitleSize(.06);
          h_dw23_sums[source][arm][charge][region]->Draw("ep");
          //plot lower, middle, and upper slices of 2d function for this region
          f_2d_gaus_slice[region]->SetLineColor(2);
          f_2d_gaus_slice[region]->Draw("same");

          c_dw23_fits_summary->cd((arm*2+charge)+region*4+1);
          h_dw23_sums[source][arm][charge][region]->Draw("ep");
          f_2d_gaus_slice[region]->Draw("same");
        }
        
        c_h2_dw23_vs_wness[source][arm][charge]->cd(5);
        double wness_temp = h_wness_sums[source][arm][charge][4]->GetMean();
        TF1 *f_dw23_proj = new TF1("f_dw23_proj",double_gaus_slice,distmin[11],distmax[11],5);
        f_dw23_proj->SetParameter(0,mean_linear_pars[source][arm][charge][0]+mean_linear_pars[source][arm][charge][1]*wness_temp);
        f_dw23_proj->SetParameter(1,sigma1_linear_pars[source][arm][charge][0]+sigma1_linear_pars[source][arm][charge][1]*wness_temp);
        f_dw23_proj->SetParameter(2,sigma2_linear_pars[source][arm][charge][0]+sigma2_linear_pars[source][arm][charge][1]*wness_temp);
        f_dw23_proj->SetParameter(3,factor_linear_pars[source][arm][charge][0]+factor_linear_pars[source][arm][charge][1]*wness_temp);
        f_dw23_proj->SetParameter(4,poly_pars[source][arm][charge][0]+
            poly_pars[source][arm][charge][1]*(wness_temp)+
            poly_pars[source][arm][charge][2]*pow(wness_temp,2)+
            poly_pars[source][arm][charge][3]*pow(wness_temp,3)+
            poly_pars[source][arm][charge][4]*pow(wness_temp,4));
        sprintf(name,"%s %s Projection 0.9 < W_{ness} < 1.0",arm_label[arm],charge_label[charge]);
        h_dw23_sums[source][arm][charge][4]->SetTitle(name);
        h_dw23_sums[source][arm][charge][4]->SetTitleSize(.09);
        h_dw23_sums[source][arm][charge][4]->GetXaxis()->SetLabelSize(.06);
        h_dw23_sums[source][arm][charge][4]->GetXaxis()->SetTitle("dw_{23}");
        h_dw23_sums[source][arm][charge][4]->GetXaxis()->SetTitleSize(.06);
        h_dw23_sums[source][arm][charge][4]->GetYaxis()->SetLabelSize(.06);
        h_dw23_sums[source][arm][charge][4]->GetYaxis()->SetTitle("Yield (2D Normalized)");
        h_dw23_sums[source][arm][charge][4]->GetYaxis()->SetTitleSize(.06);
        h_dw23_sums[source][arm][charge][4]->Draw("ep");
        //f_dw23_proj->SetTitle("dw23 projection @ W_{ness}=0.95");
        f_dw23_proj->Draw("ACsame");
        f_dw23_proj->SetLineColor(2);
        
        c_dw23_fits_summary->cd((arm*2+charge)+17);
        h_dw23_sums[source][arm][charge][4]->Draw("ep");
        f_dw23_proj->Draw("ACsame");
        
        c_h2_dw23_vs_wness[source][arm][charge]->cd(6);
        TF1 *f_mean_tmp = new TF1("f_mean_temp","pol1(0)",0,1);
        f_mean_tmp->SetParameter(0,mean_linear_pars[source][arm][charge][0]);
        f_mean_tmp->SetParameter(1,mean_linear_pars[source][arm][charge][1]);
        f_mean_tmp->SetTitle("mean vs Wness");
        TGraph *g_mean_tmp = new TGraph(f_mean_tmp);
        g_mean_tmp->GetYaxis()->SetLabelSize(.06);
        g_mean_tmp->GetXaxis()->SetLabelSize(.06);
        g_mean_tmp->Draw("AC");

        c_h2_dw23_vs_wness[source][arm][charge]->cd(7);
        TF1 *f_sigma1_tmp = new TF1("f_sigma1_temp","pol1(0)",0,1);
        f_sigma1_tmp->SetParameter(0,sigma1_linear_pars[source][arm][charge][0]);
        f_sigma1_tmp->SetParameter(1,sigma1_linear_pars[source][arm][charge][1]);
        f_sigma1_tmp->SetTitle("Sigma 1 vs Wness");
        TGraph *g_sigma1_tmp = new TGraph(f_sigma1_tmp);
        g_sigma1_tmp->GetYaxis()->SetLabelSize(.06);
        g_sigma1_tmp->GetXaxis()->SetLabelSize(.06);
        g_sigma1_tmp->Draw("AC");

        c_h2_dw23_vs_wness[source][arm][charge]->cd(8);
        TF1 *f_sigma2_tmp = new TF1("f_sigma2_temp","pol1(0)",0,1);
        f_sigma2_tmp->SetParameter(0,sigma2_linear_pars[source][arm][charge][0]);
        f_sigma2_tmp->SetParameter(1,sigma2_linear_pars[source][arm][charge][1]);
        f_sigma2_tmp->SetTitle("Sigma 2 vs Wness");
        TGraph *g_sigma2_tmp = new TGraph(f_sigma2_tmp);
        g_sigma2_tmp->GetYaxis()->SetLabelSize(.06);
        g_sigma2_tmp->GetXaxis()->SetLabelSize(.06);
        g_sigma2_tmp->Draw("AC");

        c_h2_dw23_vs_wness[source][arm][charge]->cd(9);
        TF1 *f_factor_tmp = new TF1("f_factor_temp","pol1(0)",0,1);
        f_factor_tmp->SetParameter(0,factor_linear_pars[source][arm][charge][0]);
        f_factor_tmp->SetParameter(1,factor_linear_pars[source][arm][charge][1]);
        f_factor_tmp->SetTitle("Factor vs Wness");
        TGraph *g_factor_tmp = new TGraph(f_factor_tmp);
        g_factor_tmp->GetYaxis()->SetLabelSize(.06);
        g_factor_tmp->GetXaxis()->SetLabelSize(.06);
        g_factor_tmp->Draw("AC");

        sprintf(name,"/direct/phenix+WWW/p/draft/danielj/analysis_plots/run13_w_analysis/eta_dw23_fit/temp/dw23_vs_wness_fit_arm%d_charge%d.png",arm,charge);
        c_h2_dw23_vs_wness[source][arm][charge]->SaveAs(name);
      }
    }
  }

  sprintf(name,"/direct/phenix+WWW/p/draft/danielj/analysis_plots/run13_w_analysis/eta_dw23_fit/temp/dw23_fits_summary.png");
  c_dw23_fits_summary->SaveAs(name);
  
  /*
  //construct hadronic background pdf
  h_proj_dw23[3][2][2];
  for(int source=0; source<1; source++) {
    for(int arm=0; arm<2; arm++) {
      for(int charge=0; charge<2; charge++) {
        sprintf(name,"h_proj_dw23_source%d_arm%d_charge%d",source,arm,charge);
        h_proj_dw23[source][arm][charge] = new TH1F(name,name,100,distmin[11],distmax[11]);

      }
    }
  }*/
  
  
  
  
/*  
  //do 1d fits on tgrapherrors
  int n_pars_1d = 4;
  double pars_1d[n_pars_1d];

  TCanvas *c_g_dw23[3][2][2];
  TGraphErrors *g_dw23[3][2][2][10];

  double dw23_entries[3][2][2][10][nhistbins];
  double dw23_axis[3][2][2][10][nhistbins];
  double dw23_err[3][2][2][10][nhistbins];
  double dw23_axis_err[3][2][2][10][nhistbins];
  
  double mean[3][2][2][10];
  double sigma1[3][2][2][10];
  double sigma2[3][2][2][10];
  double factor[3][2][2][10];

  double mean_err[3][2][2][10];
  double sigma1_err[3][2][2][10];
  double sigma2_err[3][2][2][10];
  double factor_err[3][2][2][10];

  double wness_section_arr[10] = {0.05,.15,.25,.35,.45,.55,.65,.75,.85,.95};
  double wness_err[10] = {.05,.05,.05,.05,.05,.05,.05,.05,.05,.05};
  
  double linear_fit_pars[3][2][2][3][2];

  for(int source=0; source < 1; source++) {//start loop for tgrapherrors fits
    for(int arm=0; arm<2; arm++) {
      for(int charge=0; charge<2; charge++) {
        sprintf(name,"c_g_dw23_source%d_arm%d_charge%d",source,arm,charge);
        c_g_dw23[source][arm][charge] = new TCanvas(name,name,1100,800);
        c_g_dw23[source][arm][charge]->Divide(4,3);
        for(int wness_section=0; wness_section<10; wness_section++) {
          TF1 *f_double_gaus_1d;
          f_double_gaus_1d = new TF1("f_double_gaus_1d",double_gaus_1d,distmin[11],distmax[11],n_pars_1d);
          
          if(wness_section>0)
            c_g_dw23[source][arm][charge]->cd(wness_section);
          
          double integral = h_dw23[source][arm][charge][wness_section]->Integral("width");
          double width = h_dw23[source][arm][charge][wness_section]->GetBinWidth(1);

          for(int bin=1; bin<=nhistbins; bin++) {
            dw23_entries[source][arm][charge][wness_section][bin-1] = 
              h_dw23[source][arm][charge][wness_section]->GetBinContent(bin)/integral;
            dw23_axis[source][arm][charge][wness_section][bin-1] = 
              h_dw23[source][arm][charge][wness_section]->GetBinLowEdge(bin) + width/2.0;
            dw23_err[source][arm][charge][wness_section][bin-1] = 
              sqrt(h_dw23[source][arm][charge][wness_section]->GetBinContent(bin))/integral;
            dw23_axis_err[source][arm][charge][wness_section][bin-1] = width/2.0;
          }
          
          g_dw23[source][arm][charge][wness_section] = new TGraphErrors(nhistbins,
              dw23_axis[source][arm][charge][wness_section],
              dw23_entries[source][arm][charge][wness_section],
              dw23_axis_err[source][arm][charge][wness_section],
              dw23_err[source][arm][charge][wness_section]);
          
          f_double_gaus_1d->SetParLimits(0,distmin[11],distmax[11]);
          f_double_gaus_1d->SetParLimits(1,.5,.05);
          f_double_gaus_1d->SetParLimits(2,.07,.01);
          f_double_gaus_1d->SetParLimits(3,-10,10);
          f_double_gaus_1d->SetParameter(0,h_dw23[source][arm][charge][wness_section]->GetMean());
          f_double_gaus_1d->SetParameter(1,h_dw23[source][arm][charge][wness_section]->GetRMS()*1.5);
          f_double_gaus_1d->SetParameter(2,h_dw23[source][arm][charge][wness_section]->GetRMS()*.9);
          f_double_gaus_1d->SetParameter(3,1);
          g_dw23[source][arm][charge][wness_section]->Fit("f_double_gaus_1d","MN");
          
          f_double_gaus_1d->GetParameters(pars_1d);
          
          f_double_gaus_1d = new TF1("f_double_gaus_1d",double_gaus_1d,distmin[11],distmax[11],n_pars_1d);

          f_double_gaus_1d->SetParameter(0,pars_1d[0]);
          f_double_gaus_1d->SetParameter(1,pars_1d[1]);
          f_double_gaus_1d->SetParameter(2,pars_1d[2]);
          f_double_gaus_1d->SetParameter(3,pars_1d[3]);
          g_dw23[source][arm][charge][wness_section]->Fit("f_double_gaus_1d","MN");
          
          f_double_gaus_1d->GetParameters(pars_1d);
          double *par_err;
          par_err = (double*)f_double_gaus_1d->GetParErrors();
          
          mean[source][arm][charge][wness_section] = pars_1d[0];
          sigma1[source][arm][charge][wness_section] = pars_1d[1];
          sigma2[source][arm][charge][wness_section] = pars_1d[2];
          factor[source][arm][charge][wness_section] = pars_1d[3];
          
          mean_err[source][arm][charge][wness_section] = par_err[0];
          sigma1_err[source][arm][charge][wness_section] = par_err[1];
          sigma2_err[source][arm][charge][wness_section] = par_err[2];
          factor_err[source][arm][charge][wness_section] = par_err[3];
          
          if(wness_section>0) {
            sprintf(name,"dw23 fit %3.2f < Wness < %3.2f",wness_section/10.0,(wness_section+1)/10.0);
            g_dw23[source][arm][charge][wness_section]->SetTitle(name);
            g_dw23[source][arm][charge][wness_section]->Draw("A*");
            
            TF1 *f_gaus1 = new TF1("f_gaus1","1/(sqrt(2*3.14159265)*([1]+[2]*[3]))*exp(-0.5*pow((x-[0])/[1],2))",distmin[11],distmax[11]);
            TF1 *f_gaus2 = new TF1("f_gaus2","1/(sqrt(2*3.14159265)*([1]+[2]*[3]))*[3]*exp(-0.5*pow((x-[0])/[2],2))",distmin[11],distmax[11]);
            
            for(int par=0; par<n_pars_1d; par++) {
              f_double_gaus_1d->SetParameter(par,pars_1d[par]);
              f_gaus1->SetParameter(par,pars_1d[par]);
              f_gaus2->SetParameter(par,pars_1d[par]);
            }
            
            f_double_gaus_1d->SetLineColor(2);
            f_gaus1->SetLineColor(3);
            f_gaus2->SetLineColor(4);
            f_gaus1->SetLineStyle(2);
            f_gaus2->SetLineStyle(2);
            
            f_double_gaus_1d->Draw("same");
            f_gaus1->Draw("same");
            f_gaus2->Draw("same");
          }

          if(wness_section == 9) {
            c_g_dw23[source][arm][charge]->cd(10);
            TGraphErrors *g_sigma1 = new TGraphErrors(10,wness_section_arr,sigma1[source][arm][charge],wness_err,sigma1_err[source][arm][charge]);
            g_sigma1->SetTitle("Sigma 1 vs Wness");
            g_sigma1->Draw("A*");
            TF1 * f_sigma1; f_sigma1 = new TF1("f_sigma1","pol1(0)",0.1,0.9);
            f_sigma1->SetParameter(0,sigma1[source][arm][charge][2]);
            f_sigma1->SetParameter(1,0);
            g_sigma1->Fit("f_sigma1","MRN");
            f_sigma1->GetParameters(linear_fit_pars[source][arm][charge][0]);
            f_sigma1->SetParameter(0,linear_fit_pars[source][arm][charge][0][0]);
            f_sigma1->SetParameter(1,linear_fit_pars[source][arm][charge][0][1]);
            g_sigma1->Fit("f_sigma1","MRN");
            f_sigma1->GetParameters(linear_fit_pars[source][arm][charge][0]);
            TF1 * f_sigma1_plot = new TF1("f_sigma1_plot","pol1(0)",0.1,0.9);
            f_sigma1_plot->SetParameter(0,linear_fit_pars[source][arm][charge][0][0]);
            f_sigma1_plot->SetParameter(1,linear_fit_pars[source][arm][charge][0][1]);
            f_sigma1_plot->Draw("same");
            
            c_g_dw23[source][arm][charge]->cd(11);
            TGraphErrors *g_sigma2 = new TGraphErrors(10,wness_section_arr,sigma2[source][arm][charge],wness_err,sigma2_err[source][arm][charge]);
            g_sigma2->SetTitle("Sigma 2 vs Wness");
            g_sigma2->Draw("A*");
            TF1 * f_sigma2; f_sigma2 = new TF1("f_sigma2","pol1(0)",0.1,0.9);
            f_sigma2->SetParameter(0,sigma2[source][arm][charge][2]);
            f_sigma2->SetParameter(1,0);
            g_sigma2->Fit("f_sigma2","MNR");
            f_sigma2->GetParameters(linear_fit_pars[source][arm][charge][1]);
            f_sigma2->SetParameter(0,linear_fit_pars[source][arm][charge][1][0]);
            f_sigma2->SetParameter(1,linear_fit_pars[source][arm][charge][1][1]);
            g_sigma2->Fit("f_sigma2","MNR");
            f_sigma2->GetParameters(linear_fit_pars[source][arm][charge][1]);
            TF1 * f_sigma2_plot = new TF1("f_sigma2_plot","pol1(0)",0.1,0.9);
            f_sigma2_plot->SetParameter(0,linear_fit_pars[source][arm][charge][1][0]);
            f_sigma2_plot->SetParameter(1,linear_fit_pars[source][arm][charge][1][1]);
            f_sigma2_plot->Draw("same");
            
            c_g_dw23[source][arm][charge]->cd(12);
            TGraphErrors *g_factor = new TGraphErrors(10,wness_section_arr,factor[source][arm][charge],wness_err,factor_err[source][arm][charge]);
            g_factor->SetTitle("Constant vs Wness");
            g_factor->Draw("A*");
            TF1 * f_factor; f_factor = new TF1("f_factor","pol1(0)",0.1,0.9);
            f_factor->SetParameter(0,factor[source][arm][charge][2]);
            f_factor->SetParameter(1,0);
            g_factor->Fit("f_factor","MNR");
            f_factor->GetParameters(linear_fit_pars[source][arm][charge][2]);
            f_factor->SetParameter(0,linear_fit_pars[source][arm][charge][2][0]);
            f_factor->SetParameter(1,linear_fit_pars[source][arm][charge][2][1]);
            g_factor->Fit("f_factor","MNR");
            f_factor->GetParameters(linear_fit_pars[source][arm][charge][2]);
            TF1 * f_factor_plot = new TF1("f_factor_plot","pol1(0)",0.1,0.9);
            f_factor_plot->SetParameter(0,linear_fit_pars[source][arm][charge][2][0]);
            f_factor_plot->SetParameter(1,linear_fit_pars[source][arm][charge][2][1]);
            f_factor_plot->Draw("same");
          }

        }
      }
    }
  }//end 1d fits on tgrapherrors
  
  
  //DO 1D FITS ON HISTOGRAMS:
  TCanvas * c_h_dw23[3][2][2];

  for(int source=0; source < 1; source++) {
    for(int arm=0; arm<2; arm++) {
      for(int charge=0; charge<2; charge++) {
        sprintf(name,"c_h_dw23_source%d_arm%d_charge%d",source,arm,charge);
        c_h_dw23[source][arm][charge] = new TCanvas(name,name,1100,800);
        c_h_dw23[source][arm][charge]->Divide(4,3);
        for(int wness_section=0; wness_section<10; wness_section++) {
          TF1 *f_double_gaus_1d;
          f_double_gaus_1d = new TF1("f_double_gaus_1d",double_gaus_1d,distmin[11],distmax[11],n_pars_1d);

          if(wness_section>0) {
            c_h_dw23[source][arm][charge]->cd(wness_section);
          }

          double integral = h_dw23[source][arm][charge][wness_section]->Integral("width");
          if(integral != 0)
            h_dw23[source][arm][charge][wness_section]->Scale(1.0/integral);

          f_double_gaus_1d->SetParLimits(0,distmin[11],distmax[11]);
          f_double_gaus_1d->SetParLimits(1,.5,.05);
          f_double_gaus_1d->SetParLimits(2,.07,.01);
          f_double_gaus_1d->SetParLimits(3,-10,10);
          f_double_gaus_1d->SetParameter(0,h_dw23[source][arm][charge][wness_section]->GetMean());
          f_double_gaus_1d->SetParameter(1,h_dw23[source][arm][charge][wness_section]->GetRMS()*1.5);
          f_double_gaus_1d->SetParameter(2,h_dw23[source][arm][charge][wness_section]->GetRMS()*.9);
          f_double_gaus_1d->SetParameter(3,1);
          if(wness_section>0)
          h_dw23[source][arm][charge][wness_section]->Fit("f_double_gaus_1d","MN");
          
          f_double_gaus_1d->GetParameters(pars_1d);

          f_double_gaus_1d = new TF1("f_double_gaus_1d",double_gaus_1d,distmin[11],distmax[11],n_pars_1d);

          f_double_gaus_1d->SetParameter(0,pars_1d[0]);
          f_double_gaus_1d->SetParameter(1,pars_1d[1]);
          f_double_gaus_1d->SetParameter(2,pars_1d[2]);
          f_double_gaus_1d->SetParameter(3,pars_1d[3]);
            h_dw23[source][arm][charge][wness_section]->Fit("f_double_gaus_1d","MN");
          
          f_double_gaus_1d->GetParameters(pars_1d);
          double *par_err;
          par_err = (double*)f_double_gaus_1d->GetParErrors();
          
          mean[source][arm][charge][wness_section] = pars_1d[0];
          sigma1[source][arm][charge][wness_section] = pars_1d[1];
          sigma2[source][arm][charge][wness_section] = pars_1d[2];
          factor[source][arm][charge][wness_section] = pars_1d[3];
          
          mean_err[source][arm][charge][wness_section] = par_err[0];
          sigma1_err[source][arm][charge][wness_section] = par_err[1];
          sigma2_err[source][arm][charge][wness_section] = par_err[2];
          factor_err[source][arm][charge][wness_section] = par_err[3];
          
          if(wness_section>0) {
            sprintf(name,"dw23 fit %3.2f < Wness < %3.2f",wness_section/10.0,(wness_section+1)/10.0);
            h_dw23[source][arm][charge][wness_section]->SetTitle(name);
            h_dw23[source][arm][charge][wness_section]->Draw();
            
            TF1 *f_gaus1 = new TF1("f_gaus1","1/(sqrt(2*3.14159265)*([1]+[2]*[3]))*exp(-0.5*pow((x-[0])/[1],2))",distmin[11],distmax[11]);
            TF1 *f_gaus2 = new TF1("f_gaus2","1/(sqrt(2*3.14159265)*([1]+[2]*[3]))*[3]*exp(-0.5*pow((x-[0])/[2],2))",distmin[11],distmax[11]);
            
            for(int par=0; par<n_pars_1d; par++) {
              f_double_gaus_1d->SetParameter(par,pars_1d[par]);
              f_gaus1->SetParameter(par,pars_1d[par]);
              f_gaus2->SetParameter(par,pars_1d[par]);
            }
            
            f_double_gaus_1d->SetLineColor(2);
            f_gaus1->SetLineColor(3);
            f_gaus2->SetLineColor(4);
            f_gaus1->SetLineStyle(2);
            f_gaus2->SetLineStyle(2);
            
            f_double_gaus_1d->Draw("same");
            f_gaus1->Draw("same");
            f_gaus2->Draw("same");
            
          }
          if(wness_section == 9) {
            c_h_dw23[source][arm][charge]->cd(10);
            TGraphErrors *g_sigma1 = new TGraphErrors(10,wness_section_arr,sigma1[source][arm][charge],wness_err,sigma1_err[source][arm][charge]);
            g_sigma1->SetTitle("Sigma 1 vs Wness");
            g_sigma1->Draw("A*");
            TF1 * f_sigma1; f_sigma1 = new TF1("f_sigma1","pol1(0)",0.1,0.9);
            f_sigma1->SetParameter(0,sigma1[source][arm][charge][2]);
            f_sigma1->SetParameter(1,0);
            g_sigma1->Fit("f_sigma1","MRN");
            f_sigma1->GetParameters(linear_fit_pars[source][arm][charge][0]);
            f_sigma1->SetParameter(0,linear_fit_pars[source][arm][charge][0][0]);
            f_sigma1->SetParameter(1,linear_fit_pars[source][arm][charge][0][1]);
            g_sigma1->Fit("f_sigma1","MRN");
            f_sigma1->GetParameters(linear_fit_pars[source][arm][charge][0]);
            TF1 * f_sigma1_plot = new TF1("f_sigma1_plot","pol1(0)",0.1,0.9);
            f_sigma1_plot->SetParameter(0,linear_fit_pars[source][arm][charge][0][0]);
            f_sigma1_plot->SetParameter(1,linear_fit_pars[source][arm][charge][0][1]);
            f_sigma1_plot->Draw("same");
            
            c_h_dw23[source][arm][charge]->cd(11);
            TGraphErrors *g_sigma2 = new TGraphErrors(10,wness_section_arr,sigma2[source][arm][charge],wness_err,sigma2_err[source][arm][charge]);
            g_sigma2->SetTitle("Sigma 2 vs Wness");
            g_sigma2->Draw("A*");
            TF1 * f_sigma2; f_sigma2 = new TF1("f_sigma2","pol1(0)",0.1,0.9);
            f_sigma2->SetParameter(0,sigma2[source][arm][charge][2]);
            f_sigma2->SetParameter(1,0);
            g_sigma2->Fit("f_sigma2","MNR");
            f_sigma2->GetParameters(linear_fit_pars[source][arm][charge][1]);
            f_sigma2->SetParameter(0,linear_fit_pars[source][arm][charge][1][0]);
            f_sigma2->SetParameter(1,linear_fit_pars[source][arm][charge][1][1]);
            g_sigma2->Fit("f_sigma2","MNR");
            f_sigma2->GetParameters(linear_fit_pars[source][arm][charge][1]);
            TF1 * f_sigma2_plot = new TF1("f_sigma2_plot","pol1(0)",0.1,0.9);
            f_sigma2_plot->SetParameter(0,linear_fit_pars[source][arm][charge][1][0]);
            f_sigma2_plot->SetParameter(1,linear_fit_pars[source][arm][charge][1][1]);
            f_sigma2_plot->Draw("same");
            
            c_h_dw23[source][arm][charge]->cd(12);
            TGraphErrors *g_factor = new TGraphErrors(10,wness_section_arr,factor[source][arm][charge],wness_err,factor_err[source][arm][charge]);
            g_factor->SetTitle("Constant vs Wness");
            g_factor->Draw("A*");
            TF1 * f_factor; f_factor = new TF1("f_factor","pol1(0)",0.1,0.9);
            f_factor->SetParameter(0,factor[source][arm][charge][2]);
            f_factor->SetParameter(1,0);
            g_factor->Fit("f_factor","MNR");
            f_factor->GetParameters(linear_fit_pars[source][arm][charge][2]);
            f_factor->SetParameter(0,linear_fit_pars[source][arm][charge][2][0]);
            f_factor->SetParameter(1,linear_fit_pars[source][arm][charge][2][1]);
            g_factor->Fit("f_factor","MNR");
            f_factor->GetParameters(linear_fit_pars[source][arm][charge][2]);
            TF1 * f_factor_plot = new TF1("f_factor_plot","pol1(0)",0.1,0.9);
            f_factor_plot->SetParameter(0,linear_fit_pars[source][arm][charge][2][0]);
            f_factor_plot->SetParameter(1,linear_fit_pars[source][arm][charge][2][1]);
            f_factor_plot->Draw("same");
          }
        }
      }
    }
  }//end 1d fits on histograms
//*/

  //Signal/Background Ratio dw23 vs. eta fit
  RooRealVar v_eta("eta","eta",distmin[3],distmax[3]);
  RooRealVar v_dw23("dw23","dw23",distmin[11],distmax[11]);
  RooRealVar v_wness("Wness","Wness",0,1);
  
  RooDataSet data("data","data",wness_ntuple,RooArgSet(v_eta,v_dw23,v_wness),"Wness>.9");
  
  
  RooDataHist h_bkg_fake("h_bkg_fake","h_bkg_fake",RooArgSet(v_eta,v_dw23),h2_dw23_vs_eta[0][0][0][9]);
  RooDataHist h_bkg_w("h_bkg_w","h_bkg_w",RooArgSet(v_eta,v_dw23),h2_dw23_vs_eta[0][0][0][9]);
  RooDataHist h_sig_w("h_sig_w","h_sig_w",RooArgSet(v_eta,v_dw23),h2_dw23_vs_eta[0][0][0][9]);
  
  RooHistPdf pdf_bkg_fake("pdf_bkg_fake","pdf_bkg_fake",RooArgSet(v_eta,v_dw23),h_bkg_fake);
  RooHistPdf pdf_bkg_w("pdf_bkg_w","pdf_bkg_w",RooArgSet(v_eta,v_dw23),h_bkg_w);
  RooHistPdf pdf_sig_w("pdf_sig_w","pdf_sig_w",RooArgSet(v_eta,v_dw23),h_sig_w);
  
  RooRealVar nw("nw", "W number", 10, 0.0, 1020.0);
  RooRealVar nbg("nbg", "BG number", 100, 0.0, 15000.0);
  RooRealVar nhad("nhad", "fake number", 100, 0.0, 15000.0);
  
  RooAddPdf model_h1("model_h1", "model", RooArgList(pdf_sig_w, pdf_bkg_w, pdf_bkg_fake), RooArgList(nw, nbg, nhad));

 
}


